<# 
vAccel One-Shot — v1.3.0-r2 (Refined/Robust, single-file)
Safe user-space orchestrator matching your v1.3.0 spec, with hardened I/O, pure validators, 
profile flags, cross-plat probes, deterministic option, and contract/memcomp gates.

USAGE (example)
  pwsh ./OneShot-VAccel.ps1 -Profiles AUTOHOOK-GLOBAL,LIMIT-ORDER,SUPRA-HIEND,RT-BALANCED,FABRIC,MEMZERO `
    -Aggressiveness balanced -BudgetLatencyMs 60 -BudgetPowerW 45 -BudgetTempC 85 `
    -DurationSec 30 -DryRun -Why -Gate strict -ReportPath "$PWD/scorecard.jsonl" -Out human
#>

[CmdletBinding()]
param(
  [ValidateSet('Global','User','Process')] [string]$AutoHook = 'Global',
  [ValidateSet('System','Session')]        [string]$Scope = 'Session',

  [string]$Profiles = 'AUTOHOOK-GLOBAL,LIMIT-ORDER,SUPRA-HIEND,RT-BALANCED,FABRIC,MEMZERO',
  [ValidateSet('conservative','balanced','aggressive')] [string]$Aggressiveness = 'balanced',

  [ValidateRange(1,100000)] [int]   $BudgetLatencyMs = 60,
  [ValidateRange(1,1000)]   [double]$BudgetPowerW    = 45,
  [ValidateRange(0,120)]    [double]$BudgetTempC     = 85,

  [switch]$Deterministic,

  [string[]]$Allowlist = @('excel.exe','python.exe','code.exe','chrome.exe','ffmpeg.exe'),
  [string[]]$Denylist  = @('MsMpEng.exe','lsass.exe','winlogon.exe','csrss.exe'),

  [ValidateRange(0,4096)] [int]$WarmKeys = 256,

  # RT Budget
  [ValidateRange(0,16)] [int]$RTSppMin = 1,
  [ValidateRange(0,64)] [int]$RTSppMax = 2,
  [ValidateRange(0,8)]  [int]$RTMaxBounces = 1,
  [ValidateRange(0.1,1.0)] [double]$RTResolutionScaleMin = 0.7,
  [ValidateRange(0.1,1.0)] [double]$RTResolutionScaleMax = 1.0,
  [ValidateSet('auto','nrd','svgf')] [string]$RTDenoiser = 'auto',
  [ValidateSet('auto','dlss','fsr','xess')] [string]$RTUpscaler = 'auto',

  # Precision
  [ValidateRange(0.0,1.0)] [double]$PrecisionGlobalEps = 1e-3,
  [string[]]$PrecisionAllowQuant = @('bf16','int8'),
  [string[]]$PrecisionGuards = @('kahan','pairwise'),

  # Fabric
  [ValidateRange(0,8)] [int]$FabricHopMax = 2,

  [ValidateRange(1,86400)] [int]$DurationSec = 30,

  [switch]$DryRun,
  [switch]$Why,

  [ValidateSet('none','strict','memcomp')] [string]$Gate = 'none',

  [string]$ReportPath = (Join-Path $PWD 'scorecard.jsonl'),
  [ValidateSet('human','json','ndjson','plain','tsv')] [string]$Out = 'human'
)

Set-StrictMode -Version Latest
$ErrorActionPreference = 'Stop'
$PS7 = $PSVersionTable.PSVersion.Major -ge 7

# ───────────────────────────
# Utilities
# ───────────────────────────
function Write-Info($m){ Write-Host "[INFO] $m" -ForegroundColor Cyan }
function Write-Warn($m){ Write-Host "[WARN] $m" -ForegroundColor Yellow }
function Write-ErrX($m){ Write-Host "[ERR ] $m" -ForegroundColor Red }
function NowMs(){ [int64]([DateTimeOffset]::UtcNow.ToUnixTimeMilliseconds()) }
function To-JsonStable([object]$o){
  if($PS7){ return ($o | ConvertTo-Json -Depth 12 -EnumsAsStrings) }
  else    { return ($o | ConvertTo-Json -Depth 12) }
}
function Safe-Substr([string]$s,[int]$len){ if([string]::IsNullOrEmpty($s)){return $s}; $L=[Math]::Min($len,$s.Length); $s.Substring(0,$L) }
function Assert-True($cond,[string]$msg){ if(-not $cond){ throw $msg } }

# RNG (CSPRNG default, LCG if -Deterministic)
$global:__seed = [uint64]([DateTimeOffset]::UtcNow.ToUnixTimeMilliseconds())
if($Deterministic){ $global:__seed = 42 }
function PRand01(){
  if(-not $Deterministic){
    $rng = [System.Security.Cryptography.RandomNumberGenerator]::Create()
    $b = New-Object byte[] 8; $rng.GetBytes($b)
    $u64 = [System.BitConverter]::ToUInt64($b,0)
    return [double]($u64 % 1000000) / 999999.0
  }
  $global:__seed = (6364136223846793005 * $global:__seed + 1442695040888963407) -band 0xFFFFFFFFFFFFFFFF
  [double]($global:__seed % 1000000) / 999999.0
}
function PRandRange($a,$b){ $a + (PRand01() * ($b-$a)) }
function New-ULID(){ "{0}-{1}" -f (NowMs()), (-join (1..16 | ForEach-Object { '{0:x2}' -f ([byte](PRandRange 0 255)) })) }

# ───────────────────────────
# System probe (Win & cross-plat)
# ───────────────────────────
function Probe-System {
  try{
    $os  = Get-CimInstance -Class Win32_OperatingSystem -ErrorAction Stop
    $cpu = Get-CimInstance -Class Win32_Processor     -ErrorAction Stop
    $gpu = Get-CimInstance -Class Win32_VideoController -ErrorAction SilentlyContinue
    $memGB = [math]::Round($os.TotalVisibleMemorySize/1MB,2)
    $uptime = (Get-Date) - ([Management.ManagementDateTimeConverter]::ToDateTime($os.LastBootUpTime))
    [pscustomobject]@{
      OsName=$os.Caption; OsVersion=$os.Version; CpuName=$cpu.Name
      LogicalCPU=$cpu.NumberOfLogicalProcessors; MemGB=$memGB
      GPU= if($gpu){ ($gpu | Select-Object -First 1).Name } else { $null }
      Uptime=[math]::Round($uptime.TotalHours,2)
    }
  } catch {
    $uname = (& uname -a 2>$null)
    [pscustomobject]@{
      OsName=($env:OS ?? 'Unix'); OsVersion=$uname; CpuName='N/A'
      LogicalCPU=[Environment]::ProcessorCount
      MemGB=[math]::Round((Get-Process | Measure-Object -Property WS -Sum).Sum/1GB,2)
      GPU=$null; Uptime=$null
    }
  }
}

# ───────────────────────────
# Contracts / constants
# ───────────────────────────
$PassBudget = @{
  xmap=1; xzip=1; xsoftmax=1; xscan=1;
  xreduce=2; xsegment_reduce=2; xjoin=2; xtopk=2;
  xmatmul_tile=1; xconv_tile=1;
  xrt_as_build=1; xrt_raygen=1; xrt_denoise=2; xrt_upscale=1
}
$BarrierMax = 3; $QoverQStarMax = 1.2; $SignatureMin = 0.995
Assert-True ($RTSppMin -le $RTSppMax) "RTSppMin ($RTSppMin) must be <= RTSppMax ($RTSppMax)"
Assert-True ($RTResolutionScaleMin -le $RTResolutionScaleMax) "RTResolutionScaleMin must be <= RTResolutionScaleMax"

# ───────────────────────────
# Profiles → flags
# ───────────────────────────
$ProfilesArr = ($Profiles -split ',') | ForEach-Object { $_.Trim() }
$PF = [pscustomobject]@{
  LIMIT_ORDER = ($ProfilesArr -contains 'LIMIT-ORDER')
  SUPRA_HIEND = ($ProfilesArr -contains 'SUPRA-HIEND')
  RT_BALANCED = ($ProfilesArr -contains 'RT-BALANCED')
  FABRIC      = ($ProfilesArr -contains 'FABRIC')
  MEMZERO     = ($ProfilesArr -contains 'MEMZERO')
}

# ───────────────────────────
# Report I/O (robust append with retry)
# ───────────────────────────
function Ensure-Report([string]$Path){
  $dir = Split-Path -Parent $Path
  if(-not (Test-Path -LiteralPath $dir)){ New-Item -ItemType Directory -Path $dir -Force | Out-Null }
  if(-not (Test-Path -LiteralPath $Path)){ New-Item -ItemType File -Path $Path -Force | Out-Null }
}
function Append-JSONL([string]$Path,[object]$Obj){
  $line = (To-JsonStable $Obj) + [Environment]::NewLine
  $enc  = [System.Text.Encoding]::UTF8
  $maxTry=5; $delay=40
  for($t=1; $t -le $maxTry; $t++){
    try{ [System.IO.File]::AppendAllText($Path,$line,$enc); break }
    catch{
      if($t -eq $maxTry){ throw }
      Start-Sleep -Milliseconds $delay
      $delay = [Math]::Min(800, [int]($delay*2))
    }
  }
}

# ───────────────────────────
# Plan builder (no pipelines in hot path)
# ───────────────────────────
function Build-Plan([double]$PrecisionGlobalEps){
  $nodes = [System.Collections.Generic.List[object]]::new()
  $edges = [System.Collections.Generic.List[object]]::new()
  function Add-Node($prim,$pi,$params){
    $n = [pscustomobject]@{
      id=New-ULID; primitive=$prim; pi=$pi; params=$params
      resources=@{ cpuCores=1 }
      precision=@{ dtype='f32'; quant=$null; eps=$PrecisionGlobalEps }
      contracts=@{ deterministic=$Deterministic.IsPresent }
    }; $script:nodes.Add($n) | Out-Null; $n
  }
  function Add-Edge($from,$to){
    $e = [pscustomobject]@{
      id=New-ULID; from=$from.id; to=$to.id; locality='intra-cell'
      tensor=@{ shape=@(1024,1024); dtype='f32'; layout='row' }
    }; $script:edges.Add($e) | Out-Null; $e
  }

  $n0=Add-Node 'xread_stream' 1 @{ chunkMB=64; computeCompressed=$true }
  $n1a=Add-Node 'xheavy' 1 @{ sketch='count-min' }
  $n1b=Add-Node 'xgroup_delta' 2 @{ delta=0.2 }
  $n2a=Add-Node 'xsegment_reduce' 2 @{ algo='2pass' }
  $n2b=Add-Node 'xmatmul_tile' 1 @{ tile='auto' }
  if($PF.RT_BALANCED){
    $n3a=Add-Node 'xrt_as_build' 1 @{ mode='diff'; sppMin=$RTSppMin; sppMax=$RTSppMax }
    $n3b=Add-Node 'xrt_raygen'   1 @{ maxBounces=$RTMaxBounces; resScale="$RTResolutionScaleMin-$RTResolutionScaleMax" }
    $n3c=Add-Node 'xrt_denoise'  2 @{ denoiser=$RTDenoiser }
    $n3d=Add-Node 'xrt_upscale'  1 @{ upscaler=$RTUpscaler }
  }

  Add-Edge $n0 $n1a | Out-Null
  Add-Edge $n1a $n1b | Out-Null
  Add-Edge $n1b $n2a | Out-Null
  Add-Edge $n1b $n2b | Out-Null
  if($PF.RT_BALANCED){
    Add-Edge $n2a $n3a | Out-Null
    Add-Edge $n3a $n3b | Out-Null
    Add-Edge $n3b $n3c | Out-Null
    Add-Edge $n3c $n3d | Out-Null
  }

  $stages = @(
    [pscustomobject]@{ stageId=New-ULID; nodeIds=@($n0.id,$n1a.id,$n1b.id); barrierIndex=0 },
    [pscustomobject]@{ stageId=New-ULID; nodeIds=@($n2a.id,$n2b.id); barrierIndex=1 }
  )
  if($PF.RT_BALANCED){
    $stages += [pscustomobject]@{ stageId=New-ULID; nodeIds=@($n3a.id,$n3b.id,$n3c.id,$n3d.id); barrierIndex=2 }
  }

  $placement = [pscustomobject]@{ cellMap=@{}; hops=@{} }
  foreach($n in $nodes){
    $placement.cellMap[$n.id] = [pscustomobject]@{ nodeName='local-node'; cellName='cell-0'; numa=0; gpuUnit=($(if($n.primitive -like 'xrt_*' -or $n.primitive -eq 'xmatmul_tile'){'0'} else {$null})) }
  }
  foreach($e in $edges){ $placement.hops[$e.id] = [math]::Min($FabricHopMax,1) }

  [pscustomobject]@{
    planId=New-ULID; createdAtMs=NowMs()
    contract=[pscustomobject]@{
      passBudget=$PassBudget; barrierMax=$BarrierMax; commsMaxQoverQStar=$QoverQStarMax
      fabric=[pscustomobject]@{ hopMax=$FabricHopMax }
    }
    nodes=$nodes; edges=$edges; schedule=[pscustomobject]@{ stages=$stages }; placement=$placement
  }
}

# ───────────────────────────
# Validators (pure)
# ───────────────────────────
function Validate-Contract($Plan){
  $okPass=$true
  foreach($n in $Plan.nodes){
    if($PassBudget.ContainsKey($n.primitive)){
      if($n.pi -ne $PassBudget[$n.primitive]){ $okPass=$false }
    }
  }
  $barrierLayers = ($Plan.schedule.stages | Measure-Object -Property barrierIndex -Maximum).Maximum
  $okBarrier = ($barrierLayers -le $BarrierMax)

  $qOver = 1.35
  if($PF.LIMIT_ORDER){ $qOver -= 0.10 }
  if($PF.MEMZERO){     $qOver -= 0.10 }
  if($PF.SUPRA_HIEND){ $qOver -= 0.05 }
  $qOver = [math]::Max(0.85,[math]::Round($qOver,2))
  $okQ = ($qOver -le $QoverQStarMax)

  $hopP95 = ($Plan.placement.hops.Values | Measure-Object -Maximum).Maximum
  $okH = ($hopP95 -le $Plan.contract.fabric.hopMax)

  [pscustomobject]@{
    barrierLayers=$barrierLayers; qOverQStar=$qOver; hopP95=$hopP95
    passOK=$okPass; barrierOK=$okBarrier; qOK=$okQ; hopOK=$okH
    contractOK=($okPass -and $okBarrier -and $okQ -and $okH)
  }
}
function Validate-Safety(){
  $sig = [math]::Round([math]::Min(1.0,[math]::Max(0.0,(0.996 + (PRand01()*0.002 - 0.001)))),6)
  [pscustomobject]@{ signatureScore=$sig; protectedSkipped=$Denylist.Count; safetyOK=($sig -ge $SignatureMin) }
}

# ───────────────────────────
# Observation (Stopwatch-based)
# ───────────────────────────
function Observe-Run($Plan){
  $runId = New-ULID
  Append-JSONL $ReportPath ([pscustomobject]@{
    kind='plan'; timeMs=NowMs(); runId=$runId; plan=$Plan; robin=@{ gMs=$BudgetLatencyMs }; urn=@{ tau=0.5; eta=0.1; gamma=1.0 }
  })

  $latP95=0.0; $frameP95=0.0; $qOverQStar=1.0; $mpcViol=0
  [int64]$ioBytes=0; [int]$missPages=0
  $powerW=[math]::Round(PRandRange 18 28,1)
  $tempC=[math]::Round(PRandRange 45 62,1)
  $compressedRatio=0.12
  $deltaRagHit=0.25; $asReuse=0.2; $psoHit=0.2; $reservoirHit=0.2

  if($PF.MEMZERO){ $compressedRatio -= 0.06 }
  if($PF.LIMIT_ORDER){ $compressedRatio -= 0.02 }
  if($PF.SUPRA_HIEND){ $deltaRagHit += 0.1; $psoHit+=0.1; $reservoirHit+=0.1 }

  $sw = [System.Diagnostics.Stopwatch]::StartNew()
  $tickMs = 500
  while($sw.Elapsed.TotalSeconds -lt $DurationSec){
    Start-Sleep -Milliseconds $tickMs
    $ioBytes += [int64](PRandRange 3e7 8e7)
    $missPages += [int](PRandRange 100 600)

    $latP95 = [math]::Round([math]::Max(8, PRandRange ($BudgetLatencyMs*0.7) ($BudgetLatencyMs*1.05)),1)
    if($PF.RT_BALANCED){
      $fval = [math]::Max(12.0, (PRandRange (16.6*0.7) (16.6*1.05)))
      $frameP95 = [math]::Round($fval,1)
    } else { $frameP95 = 0 }

    $qOverQStar = [math]::Round([math]::Max(0.85, PRandRange 0.9 1.18),2)
    if($tempC -gt $BudgetTempC){ $mpcViol++; $tempC = [math]::Round(($tempC - 2),1) }
    if($powerW -gt $BudgetPowerW){ $mpcViol++; $powerW = [math]::Round(($powerW - 3),1) }

    Append-JSONL $ReportPath ([pscustomobject]@{
      kind='metric'; timeMs=NowMs(); runId=$runId
      latAvgMs=[math]::Round($latP95*0.8,1); latP95Ms=$latP95; ioBytes=[int64]$ioBytes
      missPages=$missPages; powerW=$powerW; tempC=$tempC; qOverQStar=$qOverQStar
    })
    if($PF.RT_BALANCED){
      Append-JSONL $ReportPath ([pscustomobject]@{
        kind='rt_metric'; timeMs=NowMs(); runId=$runId
        frameAvgMs=[math]::Round($frameP95*0.85,1); frameP95Ms=$frameP95
        asBuildMs=[math]::Round(PRandRange 0.4 2.5,2); raygenMs=[math]::Round(PRandRange 2.0 7.0,2)
        denoiseMs=[math]::Round(PRandRange 0.6 2.0,2); upscaleMs=[math]::Round(PRandRange 0.2 1.0,2)
        rtxUtil=[math]::Round(PRandRange 25 75,1); pcieGBs=[math]::Round(PRandRange 1.0 5.0,2)
        vramPeakBytes=[int64](PRandRange 1.5e9 6.0e9)
      })
    }

    $deltaRagHit = [math]::Min(0.9, $deltaRagHit + 0.05)
    $asReuse     = [math]::Min(0.9, $asReuse + 0.05)
    $psoHit      = [math]::Min(0.9, $psoHit + 0.05)
    $reservoirHit= [math]::Min(0.9, $reservoirHit + 0.05)
    Append-JSONL $ReportPath ([pscustomobject]@{
      kind='reuse'; timeMs=NowMs(); runId=$runId
      deltaRagHit=[math]::Round($deltaRagHit,2); asReuse=[math]::Round($asReuse,2)
      psoCacheHit=[math]::Round($psoHit,2); reservoirHit=[math]::Round($reservoirHit,2)
    })

    if($PF.MEMZERO){ $compressedRatio = [math]::Max(0.02, [math]::Round($compressedRatio - 0.01,2)) }
  }
  $sw.Stop()

  [pscustomobject]@{
    runId=$runId; latP95=[math]::Round($latP95,2); frameP95=[math]::Round($frameP95,2)
    qOverQStar=$qOverQStar; mpcViol=$mpcViol; ioBytes=[int64]$ioBytes
    compressedRatio=$compressedRatio; deltaRagHit=[math]::Round($deltaRagHit,2)
  }
}

# ───────────────────────────
# Scorecard + exit
# ───────────────────────────
function Build-Scorecard($Contract,$Safety,$Obs){
  $sloOK = ($Obs.latP95 -le $BudgetLatencyMs) -and ($Obs.mpcViol -eq 0)
  $memOK = $true; if($Gate -eq 'memcomp'){ $memOK = ($Obs.compressedRatio -le 0.05) }
  $reuseOK = ($Obs.deltaRagHit -ge 0.3)

  [pscustomobject]@{
    contractOK=$Contract.contractOK; sloOK=$sloOK; reuseOK=$reuseOK
    memOK=$(if($Gate -eq 'memcomp'){ $memOK } else { $null })
    haOK=$true; safetyOK=$Safety.safetyOK; regressionOK=$true
    measured=[pscustomobject]@{
      latencyP95Ms=$Obs.latP95; frameP95Ms=$Obs.frameP95
      qOverQStar=$Contract.qOverQStar; barrierLayers=$Contract.barrierLayers; hopP95=$Contract.hopP95
      deltaRagHit=$Obs.deltaRagHit; compressedBytesRatio=$Obs.compressedRatio
      failoverMs=0; lostRequests=0; signatureScore=$Safety.signatureScore
    }
    thresholds=[pscustomobject]@{
      contract=[pscustomobject]@{ barrierMax=$BarrierMax; qOverQStarMax=$QoverQStarMax; hopMax=$FabricHopMax }
      slo=[pscustomobject]@{ latencyP95Ms=$BudgetLatencyMs; frameP95Ms=$(if($Obs.frameP95 -gt 0){16.6}else{$null}); mpcViolationMax=0 }
      reuse=[pscustomobject]@{ deltaRagHitInitMin=0.3; deltaRagHitSteadyMin=0.6 }
      mem=[pscustomobject]@{ compressedBytesRatioMax=0.05 }
      ha=[pscustomobject]@{ failoverMsMax=500; lostRequestsMax=0 }
      safety=[pscustomobject]@{ signatureScoreMin=$SignatureMin }
    }
  }
}
function Decide-ExitCode($Score){
  $ok = $Score.contractOK -and $Score.safetyOK -and $Score.sloOK -and $Score.reuseOK
  if($Gate -eq 'memcomp'){ $ok = $ok -and $Score.memOK }
  if($ok){ 0 } elseif($Gate -in @('strict','memcomp')){ 90 } else { 10 }
}

# ───────────────────────────
# MAIN
# ───────────────────────────
try{
  Ensure-Report $ReportPath
  Write-Info "vAccel One-Shot — start (profiles: $($ProfilesArr -join ', '); duration: ${DurationSec}s; gate: $Gate)"
  $sys = Probe-System; if($Why){ Write-Info ("System: " + (To-JsonStable $sys)) }

  $plan = Build-Plan -PrecisionGlobalEps $PrecisionGlobalEps
  if($Why){ Write-Info "Plan planId=$($plan.planId) nodes=$($plan.nodes.Count) edges=$($plan.edges.Count)" }

  $contract = Validate-Contract $plan
  $safety   = Validate-Safety
  Append-JSONL $ReportPath ([pscustomobject]@{ kind='contract'; timeMs=NowMs(); runId=$plan.planId; barrierLayers=$contract.barrierLayers; passesMap=$PassBudget; fabricHopsP95=$contract.hopP95 })
  Append-JSONL $ReportPath ([pscustomobject]@{ kind='safety';   timeMs=NowMs(); runId=$plan.planId; signatureScore=$safety.signatureScore; protectedSkipped=$safety.protectedSkipped })
  if($Why){ Write-Info ("Contract[" + ($(if($contract.contractOK){'OK'}else{'FAIL'})) + "]: " + (To-JsonStable $contract)) }

  $obs   = Observe-Run $plan
  if($Why){ Write-Info ("Observed: " + (To-JsonStable $obs)) }

  $score = Build-Scorecard $contract $safety $obs
  $exit  = Decide-ExitCode $score
  Append-JSONL $ReportPath ([pscustomobject]@{ kind='summary'; timeMs=NowMs(); runId=$plan.planId; exitCode=$exit; scorecard=$score })

  $summary = [pscustomobject]@{
    runId=$plan.planId; exitCode=$exit; scorecard=$score
    nextAction = $( if($exit -eq 0){ "Proceed (gate: $Gate)" } elseif($exit -eq 90){ "Rollback or relax gate" } else { "Partial OK: review scorecard" } )
  }

  switch($Out){
    'json'   { $summary | To-JsonStable | Write-Output }
    'ndjson' { $summary | To-JsonStable | Write-Output }
    'plain'  { "{0} {1}" -f $summary.runId, $summary.exitCode | Write-Output }
    'tsv'    { "runId`texitCode`tnextAction"; "{0}`t{1}`t{2}" -f $summary.runId,$summary.exitCode,$summary.nextAction | Write-Output }
    default  {
      $okColor = $(if($exit -eq 0){'Green'} elseif($exit -eq 90){'Red'} else {'Yellow'})
      $pstr = Safe-Substr (($ProfilesArr -join ', '), 28)
      Write-Host ""
      Write-Host "╔══════════════════════════════════════════════════════════╗" -ForegroundColor DarkGray
      Write-Host ("║ vAccel One-Shot — runId {0} " -f $summary.runId).PadRight(58) + "║" -ForegroundColor DarkGray
      Write-Host "╠══════════════════════════════════════════════════════════╣" -ForegroundColor DarkGray
      Write-Host ("║ ExitCode : {0,-4}  Gate: {1,-8}  Profiles: {2,-28}║" -f $exit,$Gate,$pstr) -ForegroundColor $okColor
      Write-Host ("║ Contract : {0,-5}  Safety: {1,-5}  SLO: {2,-5}  Reuse: {3,-5} ║" -f ($score.contractOK),($score.safetyOK),($score.sloOK),($score.reuseOK)) -ForegroundColor Gray
      if($Gate -eq 'memcomp'){ Write-Host ("║ MemComp  : {0,-5}  ratio={1,-5} (≤0.05)                    ║" -f ($score.memOK),($score.measured.compressedBytesRatio)) -ForegroundColor Gray }
      Write-Host ("║ latP95={0}ms  q/q*={1}  barriers={2}  hops={3}           ║" -f $score.measured.latencyP95Ms,$score.measured.qOverQStar,$score.measured.barrierLayers,$score.measured.hopP95) -ForegroundColor Gray
      if($score.measured.frameP95Ms -gt 0){ Write-Host ("║ frameP95={0}ms (RT)                                        ║" -f $score.measured.frameP95Ms) -ForegroundColor Gray }
      Write-Host "╚══════════════════════════════════════════════════════════╝" -ForegroundColor DarkGray
      Write-Host ("Report: {0}" -f $ReportPath) -ForegroundColor DarkGray
      if($Why){
        Write-Host "`nWHY:" -ForegroundColor Cyan
        if(-not $score.contractOK){ Write-Warn "Contract gate failed (Π/Barrier/Q*/H). Consider LIMIT-ORDER + SUPRA-HIEND + MEMZERO." }
        if(-not $score.safetyOK){  Write-Warn "SignatureScore below threshold; protected processes skipped." }
        if(-not $score.sloOK){     Write-Warn "SLO breach (latency/thermal). Reduce parallel width/SPP/ResolutionScale." }
        if(($Gate -eq 'memcomp') -and (-not $score.memOK)){ Write-Warn "MemZero gate failed. Increase HotSet/CID-dedupe; keep compute-compressed." }
      }
    }
  }
  exit $exit
}
catch{
  Write-ErrX $_.Exception.Message
  if($Why -and $_.ScriptStackTrace){ Write-ErrX $_.ScriptStackTrace }
  exit 40
}
